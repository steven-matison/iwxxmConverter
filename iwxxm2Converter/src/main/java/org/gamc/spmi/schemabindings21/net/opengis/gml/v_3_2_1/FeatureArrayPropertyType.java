//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.27 at 12:41:52 PM MSK 
//


package schemabindings21.net.opengis.gml.v_3_2_1;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;

import schemabindings21._int.icao.iwxxm._2.AIRMETEvolvingConditionCollectionType;
import schemabindings21._int.icao.iwxxm._2.AIRMETEvolvingConditionType;
import schemabindings21._int.icao.iwxxm._2.AIRMETType;
import schemabindings21._int.icao.iwxxm._2.METARType;
import schemabindings21._int.icao.iwxxm._2.MeteorologicalAerodromeObservationReportType;
import schemabindings21._int.icao.iwxxm._2.ReportType;
import schemabindings21._int.icao.iwxxm._2.SIGMETEvolvingConditionCollectionType;
import schemabindings21._int.icao.iwxxm._2.SIGMETEvolvingConditionType;
import schemabindings21._int.icao.iwxxm._2.SIGMETPositionCollectionType;
import schemabindings21._int.icao.iwxxm._2.SIGMETPositionType;
import schemabindings21._int.icao.iwxxm._2.SIGMETType;
import schemabindings21._int.icao.iwxxm._2.SPECIType;
import schemabindings21._int.icao.iwxxm._2.TAFType;
import schemabindings21._int.icao.iwxxm._2.TropicalCycloneAdvisoryType;
import schemabindings21._int.icao.iwxxm._2.TropicalCycloneForecastConditionsType;
import schemabindings21._int.icao.iwxxm._2.TropicalCycloneObservedConditionsType;
import schemabindings21._int.icao.iwxxm._2.TropicalCycloneSIGMETType;
import schemabindings21._int.icao.iwxxm._2.VolcanicAshAdvisoryType;
import schemabindings21._int.icao.iwxxm._2.VolcanicAshCloudType;
import schemabindings21._int.icao.iwxxm._2.VolcanicAshConditionsType;
import schemabindings21._int.icao.iwxxm._2.VolcanicAshSIGMETType;
import schemabindings21._int.wmo.def.metce._2013.EruptingVolcanoType;
import schemabindings21._int.wmo.def.metce._2013.ProcessType;
import schemabindings21._int.wmo.def.metce._2013.TropicalCycloneType;
import schemabindings21._int.wmo.def.metce._2013.VolcanoType;
import schemabindings21.aero.aixm.schema._5_1.AbstractAIXMFeatureType;
import schemabindings21.aero.aixm.schema._5_1.AirportHeliportType;
import schemabindings21.aero.aixm.schema._5_1.AirspaceType;
import schemabindings21.aero.aixm.schema._5_1.RunwayDirectionType;
import schemabindings21.aero.aixm.schema._5_1.RunwayType;
import schemabindings21.aero.aixm.schema._5_1.UnitType;
import schemabindings21.net.opengis.om._2.OMObservationType;
import schemabindings21.net.opengis.sampling._2.SFSamplingFeatureCollectionType;
import schemabindings21.net.opengis.sampling._2.SFSamplingFeatureType;
import schemabindings21.net.opengis.samplingspatial._2.SFSpatialSamplingFeatureType;


/**
 * <p>Java class for FeatureArrayPropertyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FeatureArrayPropertyType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0">
 *         &lt;element ref="{http://www.opengis.net/gml/3.2}AbstractFeature"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FeatureArrayPropertyType", propOrder = {
    "abstractFeature"
})
public class FeatureArrayPropertyType {

    @XmlElementRef(name = "AbstractFeature", namespace = "http://www.opengis.net/gml/3.2", type = JAXBElement.class, required = false)
    protected List<JAXBElement<? extends AbstractFeatureType>> abstractFeature;

    /**
     * Gets the value of the abstractFeature property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the abstractFeature property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAbstractFeature().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link RunwayType }{@code >}
     * {@link JAXBElement }{@code <}{@link FeatureCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link SFSamplingFeatureType }{@code >}
     * {@link JAXBElement }{@code <}{@link AbstractFeatureCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link EruptingVolcanoType }{@code >}
     * {@link JAXBElement }{@code <}{@link TAFType }{@code >}
     * {@link JAXBElement }{@code <}{@link TropicalCycloneForecastConditionsType }{@code >}
     * {@link JAXBElement }{@code <}{@link DirectedObservationType }{@code >}
     * {@link JAXBElement }{@code <}{@link RunwayDirectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link VolcanicAshSIGMETType }{@code >}
     * {@link JAXBElement }{@code <}{@link OMObservationType }{@code >}
     * {@link JAXBElement }{@code <}{@link VolcanoType }{@code >}
     * {@link JAXBElement }{@code <}{@link VolcanicAshConditionsType }{@code >}
     * {@link JAXBElement }{@code <}{@link TropicalCycloneType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link MeteorologicalAerodromeObservationReportType }{@code >}
     * {@link JAXBElement }{@code <}{@link UnitType }{@code >}
     * {@link JAXBElement }{@code <}{@link DirectedObservationAtDistanceType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link AIRMETEvolvingConditionType }{@code >}
     * {@link JAXBElement }{@code <}{@link TropicalCycloneSIGMETType }{@code >}
     * {@link JAXBElement }{@code <}{@link DynamicFeatureCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link VolcanicAshCloudType }{@code >}
     * {@link JAXBElement }{@code <}{@link SIGMETType }{@code >}
     * {@link JAXBElement }{@code <}{@link SIGMETEvolvingConditionType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link AbstractFeatureType }{@code >}
     * {@link JAXBElement }{@code <}{@link AirspaceType }{@code >}
     * {@link JAXBElement }{@code <}{@link VolcanicAshAdvisoryType }{@code >}
     * {@link JAXBElement }{@code <}{@link SPECIType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link AIRMETType }{@code >}
     * {@link JAXBElement }{@code <}{@link SFSpatialSamplingFeatureType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link AbstractContinuousCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link SFSamplingFeatureCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link ObservationType }{@code >}
     * {@link JAXBElement }{@code <}{@link AbstractAIXMFeatureType }{@code >}
     * {@link JAXBElement }{@code <}{@link SIGMETPositionCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link SIGMETEvolvingConditionCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link DynamicFeatureType }{@code >}
     * {@link JAXBElement }{@code <}{@link TropicalCycloneAdvisoryType }{@code >}
     * {@link JAXBElement }{@code <}{@link AbstractCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link AIRMETEvolvingConditionCollectionType }{@code >}
     * {@link JAXBElement }{@code <}{@link METARType }{@code >}
     * {@link JAXBElement }{@code <}{@link AirportHeliportType }{@code >}
     * {@link JAXBElement }{@code <}{@link SIGMETPositionType }{@code >}
     * {@link JAXBElement }{@code <}{@link DiscreteCoverageType }{@code >}
     * {@link JAXBElement }{@code <}{@link ProcessType }{@code >}
     * {@link JAXBElement }{@code <}{@link ReportType }{@code >}
     * {@link JAXBElement }{@code <}{@link TropicalCycloneObservedConditionsType }{@code >}
     * 
     * 
     */
    public List<JAXBElement<? extends AbstractFeatureType>> getAbstractFeature() {
        if (abstractFeature == null) {
            abstractFeature = new ArrayList<JAXBElement<? extends AbstractFeatureType>>();
        }
        return this.abstractFeature;
    }

    public boolean isSetAbstractFeature() {
        return ((this.abstractFeature!= null)&&(!this.abstractFeature.isEmpty()));
    }

    public void unsetAbstractFeature() {
        this.abstractFeature = null;
    }

}
